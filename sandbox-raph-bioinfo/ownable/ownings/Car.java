package ownable.ownings;import java.math.BigInteger;import ownable.exceptions.IllegalOwnerException;import ownable.exceptions.IllegalValueException;import ownable.persons.Person;import be.kuleuven.cs.som.annotate.Raw;/** * A class of cars as a special kind of ownable. In addition to a * value and an owner, cars have a motor volume. *  * @invar   The motor valume of each car must be a valid motor volume *          for a car. *          | isValidMotorVolume(getMotorVolume()) * @note    For purposes of illustration, all additional properties *          ascribed to cars are worked out in a total way. *  * @version  2.0 * @author   Eric Steegmans */public class Car extends Ownable {	/**	 * Initialize this new car with given owner, given value	 * and given motor volume.	 *	 * @param   owner	 *          The owner for this new car.	 * @param   value	 *          The value for this new car.	 * @param   motorVolume	 *          The motor volume for this new car.	 * @effect 	This new car is initialized as a new ownable with	 *          given owner and given value.	 *          | super(owner,value)	 * @post    If the given motor volume is a valid motor volume for	 *          a car, the motor volume of this new car is equal to the	 *          given motor volume; otherwise, the motor volume of this	 *          new car is equal to 1000.	 *          | if (isValidMotorVolume(motorVolume))	 *          |   then (new.getMotorVolume() = motorVolume)	 *          |   else (new.getMotorVolume() = 1000)	 */	public Car(Person owner, BigInteger value, int motorVolume)	throws IllegalValueException, IllegalOwnerException {		super(owner, value);		setMotorVolume(motorVolume);	}	/**	 * Initialize this new car with a motor volume of 1000, having no owner,	 * and a value of 0.	 *	 * @effect  This new car is initalized with no owner, a value	 *          of 0, and a motor volume of 1000.	 *          | this(null,BigInteger.ZERO,1000)	 */	public Car() {	}	/**	 * Return the motor volume of this car.	 */	@Raw public int getMotorVolume() {		return this.motorVolume;	}	/**	 * Check whether the given motor volume is a valid motor	 * volume for any car.	 *	 * @param   motorVolume	 *          The motor volume to check.	 * @return  False if the given volume is not positive;	 *          undefined otherwise.	 *          | if (volume <= 0)	 *          |   then result == false	 * @note    In the specification of this method we leave room	 *          to impose an upper limit on the motor volume of	 *          (some) cars.	 */	public static boolean isValidMotorVolume(int motorVolume) {		return motorVolume >= 0;	}	/**	 * Set the motor volume of this car to the given motor volume.	 *	 * @param   motorVolume	 *          The new motor volume for this car.	 * @post    If this car has not been terminated yet, and if	 *          the given motor volume is a valid motor volume	 *          for a car, the motor volume of this car is equal	 *          to the given motor volume.	 *          | if ( (! isTerminated()) &&	 *          |      isValidMotorVolume(motorVolume) )	 *          |   then (new.getMotorVolume() == motorVolume)	 */	@Raw public void setMotorVolume(int motorVolume) {		if ((!isTerminated()) && isValidMotorVolume(motorVolume))			this.motorVolume = motorVolume;	}	/**	 * Variable referencing the motor volume of this car.	 *	 * @invar   The registered motor volume is a valid motor volume	 *          for a car.	 *          | isValidMotorVolume(motorVolume)	 */	private int motorVolume = 1000;}