/*
 * CommentToolTip.java
 *
 * Created on October 28, 2003, 11:29 AM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.custom.rega.queryeditor.gui;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseListener;
import java.awt.event.MouseEvent;
import javax.swing.*;

/**
 *
 * @author  kdg
 */
public class CommentToolTip extends JToolTip {
    
    public static final String NO_COMMENT_AVAILABLE = "No description available";
    
    private final String title;
    private final String comment;
    
    /**
     * Creates new form CommentToolTip
     *
     * @pre comment != null
     */
    public CommentToolTip(String title, String comment) {
        this(title, comment, true);
    }
    
    private CommentToolTip(final String title, final String comment, final boolean honorNewWindowRequests) {
        this.title = title;
        this.comment = comment;
        if (comment.equals(NO_COMMENT_AVAILABLE)) {
            setLayout(new java.awt.BorderLayout());
            JTextField textField = new javax.swing.JTextField(comment);
            textField.setFont(textField.getFont().deriveFont(Font.ITALIC));
            textField.setBackground(new java.awt.Color(255, 255, 153));
            add(textField, java.awt.BorderLayout.CENTER);
        } else {
            initComponents();
            jTextArea1.setCaretPosition(0);
            Dimension textSize = jPanel1.getPreferredSize();
            if ((getPreferredSize().height >= textSize.height) && (getPreferredSize().width >= textSize.width)) {
                setPreferredSize(new Dimension(textSize.width+15, textSize.height+15));
                jScrollPane1.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                jScrollPane1.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);
            }
            if (honorNewWindowRequests) {
                MouseListener mouseListener = new NewWindowMouseListener();
                jTextArea1.addMouseListener(mouseListener);
                titleLabel.addMouseListener(mouseListener);
            }
        }
    }
    
    public static void showWindowedComment(String title, String comment, Rectangle bounds) {
        JFrame frame = new JFrame();
        Container contentPane = frame.getContentPane();
        contentPane.add(new CommentToolTip(title, comment, false), BorderLayout.CENTER);
        frame.setBounds(bounds);
        frame.setTitle(title);
        frame.show();
    }
    
    public static void showWindowedComment(String title, String comment, Point p) {
        JFrame frame = new JFrame();
        Container contentPane = frame.getContentPane();
        CommentToolTip commentTT = new CommentToolTip(title, comment, false);
        contentPane.add( commentTT, BorderLayout.CENTER);
        Dimension preferedSize = commentTT.getPreferredSize();
        Rectangle bounds = new Rectangle(
                p.x,
                p.y,
                preferedSize.width,
                preferedSize.height
                );
        bounds.grow(3, 8); // Allow for some Window borders
        frame.setBounds(bounds);
        frame.setTitle(title);
        frame.show();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jTextArea1 = new javax.swing.JTextArea();
        titleLabel = new javax.swing.JLabel();

        setLayout(new java.awt.BorderLayout());

        setPreferredSize(new java.awt.Dimension(450, 150));
        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 153));
        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 5, 5, 5)));
        jTextArea1.setBackground(new java.awt.Color(255, 255, 153));
        jTextArea1.setEditable(false);
        jTextArea1.setText(comment);
        jPanel1.add(jTextArea1, java.awt.BorderLayout.CENTER);

        titleLabel.setText(title);
        titleLabel.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(0, 0, 5, 0)));
        jPanel1.add(titleLabel, java.awt.BorderLayout.NORTH);

        jScrollPane1.setViewportView(jPanel1);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

    }
    // </editor-fold>//GEN-END:initComponents
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JLabel titleLabel;
    // End of variables declaration//GEN-END:variables
    
    private class NewWindowMouseListener implements MouseListener {
        public void mouseClicked(MouseEvent e) {
            Rectangle bounds = CommentToolTip.this.getRootPane().getParent().getBounds();
            bounds.grow(3, 8); // Allow for some Window borders
            showWindowedComment(title, comment, bounds);
        }
        
        public void mouseEntered(MouseEvent e) {
        }
        
        public void mouseExited(MouseEvent e) {
        }
        
        public void mousePressed(MouseEvent e) {
        }
        
        public void mouseReleased(MouseEvent e) {
        }
    }
}
