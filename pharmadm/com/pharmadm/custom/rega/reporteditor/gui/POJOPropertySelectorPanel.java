/*
 * TableFieldSelectorPanel.java
 *
 * Created on September 4, 2003, 12:42 PM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.custom.rega.reporteditor.gui;

import java.awt.Point;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import com.pharmadm.custom.rega.reporteditor.*;
import com.pharmadm.custom.rega.queryeditor.Selection;
import com.pharmadm.custom.rega.queryeditor.ComposedSelection;

/**
 *
 * @author  kristof
 */
public class POJOPropertySelectorPanel extends javax.swing.JPanel {
    
    // there is a strong correspondence with com.pharmadm.custom.rega.queryeditor.gui.TableFieldSelectorPanel
    // some day we might make a generalization
    
    /** Creates new form TableFieldSelectorPanel */
    public POJOPropertySelectorPanel(POJOSelection pojoSelection, QueryOutputReportSeeder seedController) {
        this.pojoSelection = pojoSelection;
        initComponents();
        initPOJOCheckBox(seedController);
        initPOJOComponents();
    }
    
    public POJOPropertySelectorPanel(POJOListSelection pojoSelection, QueryOutputReportSeeder seedController) {
        this.pojoSelection = pojoSelection;
        initComponents();
        initPOJOCheckBox(seedController);
        initPOJOComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();

        setLayout(new java.awt.BorderLayout());

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.BevelBorder(javax.swing.border.BevelBorder.LOWERED));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(200, 200));
        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        add(jPanel1, java.awt.BorderLayout.CENTER);

    }//GEN-END:initComponents
    
    private void subCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        JCheckBox checkBox = ((JCheckBox)evt.getSource());
        String propertyName = checkBox.getText();
        if (pojoSelection instanceof POJOListSelection) {
            ((DataSelectionList)pojoSelection.getController()).setSelected((ListDataOutputVariable)pojoSelection.getObject(), ((ListDataOutputVariable)pojoSelection.getObject()).getElement().getProperty(propertyName), checkBox.isSelected());
        } else {
            ((DataSelectionList)pojoSelection.getController()).setSelected((DataOutputVariable)pojoSelection.getObject(), ((DataOutputVariable)pojoSelection.getObject()).getProperty(propertyName), checkBox.isSelected());
        }
    }
    
    private void initPOJOCheckBox(QueryOutputReportSeeder seedController) {
        pojoCheckBox = new JCheckBox(((DataOutputVariable)pojoSelection.getObject()).getHumanStringValue(seedController), pojoSelection.isSelected());
        pojoCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pojoCheckBoxActionPerformed(evt);
            }
        });
        add(pojoCheckBox, java.awt.BorderLayout.WEST);
    }
    
    private void pojoCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {
        ((DataSelectionList)pojoSelection.getController()).setSelected((DataOutputVariable)pojoSelection.getObject(), pojoCheckBox.isSelected());
    }
    
    private void initPOJOComponents() {
        JPanel fieldsPanel = new ScrollableFieldPanel();
        fieldsPanel.setLayout(new javax.swing.BoxLayout(fieldsPanel, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(fieldsPanel);
        
        Iterator properties = pojoSelection.getSubSelections().iterator();
        while (properties.hasNext()) {
            Selection propertySelection = (PropertySelection)properties.next();
            Property property = (Property)propertySelection.getObject();
            boolean selected = propertySelection.isSelected();
            JCheckBox checkBox = new JCheckBox(property.getName(), selected);
            checkBox.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    subCheckBoxActionPerformed(evt);
                }
            });
            fieldsPanel.add(checkBox);
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    private ComposedSelection pojoSelection;
    private JCheckBox pojoCheckBox;
    
    /**
     * Improves scroll wheel behaviour of the fields panel.
     */
    private static class ScrollableFieldPanel extends JPanel implements Scrollable {
        
        public java.awt.Dimension getPreferredScrollableViewportSize() {
            return new java.awt.Dimension(200, 200);
        }
        
        public int getScrollableBlockIncrement(java.awt.Rectangle visibleRect, int orientation, int direction) {
            return getScrollableUnitIncrement(visibleRect, orientation, direction) * 3;
        }
        
        public boolean getScrollableTracksViewportHeight() {
            return false;
        }
        
        public boolean getScrollableTracksViewportWidth() {
            return true;
        }
        
        public int getScrollableUnitIncrement(java.awt.Rectangle visibleRect, int orientation, int direction) {
            java.awt.Component firstComp = getComponent(0);
            if (firstComp != null) {
                return firstComp.getHeight();
            } else {
                return 10;
            }
        }
    }
    
}
