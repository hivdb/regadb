/*
 * FoldResistanceWizard.java
 *
 * Created on October 10, 2003, 11:43 AM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.util.gui.wizard;

import java.awt.Frame;
import java.util.ArrayList;
import java.util.List;
import java.util.Iterator;
import javax.swing.*;

/**
 * A general, re-usable wizard GUI.
 *
 * @author  kdg
 */
public class Wizard extends JDialog {
    
    private int currentStepIndex = 0;
    private Step currentStep;
    private List steps = new ArrayList();
    private DefaultListModel stepsListModel;
    
    private int status = UNFINISHED;
    
    public static final int UNFINISHED = 0;
    public static final int CANCELLED = 1;
    public static final int FINISHED = 2;
    
    /** Creates new form FoldResistanceWizard */
    public Wizard(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        stepsListModel = new DefaultListModel();
        stepsList.setModel(stepsListModel);
    }
    
    /**
     * Returns either UNFINISHED, CANCELLED or FINISHED.
     */
    public int getStatus() {
        return status;
    }
    
    /**
     * Adds a step at the end of the wizard.
     */
    public void addStep(Step step) {
        steps.add(step);
        stepsListModel.addElement(Integer.toString(steps.size()) + ". " + step.getStepDescription());
        if (steps.size() == 1) {
            setCurrentStep(step);
        }
        updateButtons();
        step.setWizard(this);
    }
    
    public void addStepAfter(Step newStep, Step precessor) {
        int precessorIndex = steps.indexOf(precessor);
        if (precessorIndex != -1) {
            steps.add(precessorIndex + 1, newStep);
            updateListModel();
            updateButtons();
            newStep.setWizard(this);
        } else {
            addStep(newStep);
        }
    }
    
    /**
     * Removes a step from the wizard.
     *
     * @pre numbers of steps >= 2
     */
    public void removeStep(Step obsoleteStep) {
        int obsoleteStepIndex = steps.indexOf(obsoleteStep);
        if (obsoleteStepIndex != -1) {
            steps.remove(obsoleteStepIndex);
            updateListModel();
            if (currentStep == obsoleteStep) {
                // by default, the next step becomes current
                if (steps.size() > obsoleteStepIndex) {
                    setCurrentStep((Step)steps.get(obsoleteStepIndex));
                } else if (steps.size() > (obsoleteStepIndex - 1)) {
                    setCurrentStep((Step)steps.get(obsoleteStepIndex-1));
                }
            }
            updateButtons();
            obsoleteStep.setWizard(null);
        }
    }
    
    private void updateListModel() {
        stepsListModel.removeAllElements();
        int stepIndex = 0;
        Iterator stepIter = steps.iterator();
        while (stepIter.hasNext()) {
            Step step = (Step)stepIter.next();
            stepsListModel.addElement((stepIndex+1) + ". " + step.getStepDescription());
            stepIndex++;
        }
    }
    
    private void setCurrentStep(Step step) {
        currentStep = step;
        currentStepIndex = steps.indexOf(step);
        stepsList.setSelectedIndex(currentStepIndex);
        subtitleLabel.setText(step.getSubtitle());
        mainInstructionsTextArea.setText(step.getMainInstructions());
        contentPanelHolder.removeAll();
        contentPanelHolder.add(step.getContentPanel(), java.awt.BorderLayout.CENTER);
        updateButtons();
        repaint();
    }
    
    private void updateButtons() {
        if (currentStepIndex == 0 || (!currentStep.allowsBack())) {
            backButton.setEnabled(false);
        } else {
            backButton.setEnabled(true);
        }
        nextOrFinishButton.setEnabled(currentStep.allowsNextOrFinish());
        if (currentStepIndex == (steps.size() - 1)) {
            nextOrFinishButton.setText("Finish");
            nextOrFinishButton.setMnemonic('f');
        } else {
            nextOrFinishButton.setText("Next ->");
            nextOrFinishButton.setMnemonic('n');
        }
    }
    
    public void notifyAllowsNextOrFinishChanged() {
        updateButtons();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        leftPanel = new javax.swing.JPanel();
        stepsLabel = new javax.swing.JLabel();
        linePanel1 = new javax.swing.JPanel();
        stepsList = new javax.swing.JList();
        buttonPanel = new javax.swing.JPanel();
        leftFillPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        nextOrFinishButton = new javax.swing.JButton();
        fillPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        mainPanel = new javax.swing.JPanel();
        subtitleLabel = new javax.swing.JLabel();
        linePanel = new javax.swing.JPanel();
        mainInstructionsTextArea = new javax.swing.JTextArea();
        contentPanelHolder = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Wizard");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        leftPanel.setLayout(new java.awt.GridBagLayout());

        leftPanel.setBackground(new java.awt.Color(255, 255, 255));
        leftPanel.setMinimumSize(new java.awt.Dimension(210, 500));
        leftPanel.setPreferredSize(new java.awt.Dimension(200, 400));
        stepsLabel.setText("Steps");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        leftPanel.add(stepsLabel, gridBagConstraints);

        linePanel1.setBackground(new java.awt.Color(0, 0, 0));
        linePanel1.setPreferredSize(new java.awt.Dimension(176, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        leftPanel.add(linePanel1, gridBagConstraints);

        stepsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        stepsList.setFixedCellWidth(176);
        stepsList.setFocusable(false);
        stepsList.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        leftPanel.add(stepsList, gridBagConstraints);

        getContentPane().add(leftPanel, java.awt.BorderLayout.WEST);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        buttonPanel.setBorder(new javax.swing.border.MatteBorder(new java.awt.Insets(1, 0, 0, 0), new java.awt.Color(0, 0, 0)));
        leftFillPanel.setPreferredSize(new java.awt.Dimension(200, 0));
        buttonPanel.add(leftFillPanel, new java.awt.GridBagConstraints());

        backButton.setMnemonic('b');
        backButton.setText("<- Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        buttonPanel.add(backButton, gridBagConstraints);

        nextOrFinishButton.setMnemonic('n');
        nextOrFinishButton.setText("Next ->");
        nextOrFinishButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextOrFinishButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 11);
        buttonPanel.add(nextOrFinishButton, gridBagConstraints);

        fillPanel.setPreferredSize(new java.awt.Dimension(10, 0));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(fillPanel, gridBagConstraints);

        cancelButton.setMnemonic('c');
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(11, 11, 11, 11);
        buttonPanel.add(cancelButton, gridBagConstraints);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.SOUTH);

        mainPanel.setLayout(new java.awt.GridBagLayout());

        subtitleLabel.setText("Subtitle");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        mainPanel.add(subtitleLabel, gridBagConstraints);

        linePanel.setBackground(new java.awt.Color(0, 0, 0));
        linePanel.setMaximumSize(new java.awt.Dimension(276000, 1));
        linePanel.setMinimumSize(new java.awt.Dimension(276, 1));
        linePanel.setPreferredSize(new java.awt.Dimension(276, 1));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 12, 0, 12);
        mainPanel.add(linePanel, gridBagConstraints);

        mainInstructionsTextArea.setBackground(mainPanel.getBackground());
        mainInstructionsTextArea.setEditable(false);
        mainInstructionsTextArea.setFont(new java.awt.Font("SansSerif", 0, 12));
        mainInstructionsTextArea.setLineWrap(true);
        mainInstructionsTextArea.setRows(1);
        mainInstructionsTextArea.setText("Put the main instructions here.");
        mainInstructionsTextArea.setWrapStyleWord(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 0, 12);
        mainPanel.add(mainInstructionsTextArea, gridBagConstraints);

        contentPanelHolder.setLayout(new java.awt.BorderLayout());

        contentPanelHolder.setPreferredSize(new java.awt.Dimension(300, 350));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.REMAINDER;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(12, 12, 12, 12);
        mainPanel.add(contentPanelHolder, gridBagConstraints);

        getContentPane().add(mainPanel, java.awt.BorderLayout.CENTER);

        pack();
    }//GEN-END:initComponents
    
    private void nextOrFinishButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextOrFinishButtonActionPerformed
        currentStep.onNextOrFinish();
        if (currentStepIndex < (steps.size() - 1)) {
            setCurrentStep((Step)steps.get(currentStepIndex + 1));
        } else {  // finish
            dispose();
            status = FINISHED;
        }
    }//GEN-LAST:event_nextOrFinishButtonActionPerformed
    
    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        currentStep.onBack();
        setCurrentStep((Step)steps.get(currentStepIndex - 1));
    }//GEN-LAST:event_backButtonActionPerformed
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
        status = CANCELLED;
    }//GEN-LAST:event_closeDialog
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Wizard wizard = new Wizard(new JFrame(), true);
        wizard.addStep(new Step() {
            public String getStepDescription() {
                return "The first step";
            }
            
            public String getSubtitle() {
                return "This is a good subtitle";
            }
            
            public String getMainInstructions() {
                return "Some interesting first instructions.";
            }
            
            public JPanel getContentPanel() {
                return new JPanel();
            }
            
            public boolean allowsBack() {
                return true;
            }
            
            public boolean allowsNextOrFinish() {
                return true;
            }
            
            public void onNextOrFinish() {
            }
            
            public void onBack() {
            }
            
            public void setWizard(Wizard wizard) {
            }
        });
        wizard.addStep(new Step() {
            public String getStepDescription() {
                return "The second step";
            }
            
            public String getSubtitle() {
                return "This is a good second subtitle";
            }
            
            public String getMainInstructions() {
                return "Some very interesting second instructions.";
            }
            
            public JPanel getContentPanel() {
                return new JPanel();
            }
            
            public boolean allowsBack() {
                return true;
            }
            
            public boolean allowsNextOrFinish() {
                return true;
            }
            
            public void onNextOrFinish() {
            }
            
            public void onBack() {
            }
            
            public void setWizard(Wizard wizard) {
            }
        });
        wizard.show();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel contentPanelHolder;
    private javax.swing.JPanel fillPanel;
    private javax.swing.JPanel leftFillPanel;
    private javax.swing.JPanel leftPanel;
    private javax.swing.JPanel linePanel;
    private javax.swing.JPanel linePanel1;
    private javax.swing.JTextArea mainInstructionsTextArea;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JButton nextOrFinishButton;
    private javax.swing.JLabel stepsLabel;
    private javax.swing.JList stepsList;
    private javax.swing.JLabel subtitleLabel;
    // End of variables declaration//GEN-END:variables
    
}
