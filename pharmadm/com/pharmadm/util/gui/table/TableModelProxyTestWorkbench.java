/*
 * SlowTableModelProxyTestWorkbench.java
 *
 * Created on June 16, 2005, 3:54 PM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.util.gui.table;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author  kdg
 */
public class TableModelProxyTestWorkbench extends javax.swing.JFrame {
    
    /** Creates new form SlowTableModelProxyTestWorkbench */
    public TableModelProxyTestWorkbench() {
        initComponents();
        initTableModel();
    }
    
    private void initTableModel() {
        TableModel tModel = new SlowTableModel();
        final TableModel proxyModel = new ScrollAwareAsyncTableModelProxy(tModel, jScrollPane1.getViewport());
        //jTable1.setModel(proxyModel);
        /*
        final AsynchronousTableModelProxy proxyModel = new AsynchronousTableModelProxy(tModel, 80);
        jTable1.setModel(proxyModel);
        jScrollPane1.getVerticalScrollBar().getModel().addChangeListener(new ChangeListener() {
            int previousNrRows;
            public void stateChanged(ChangeEvent ce) {
                BoundedRangeModel brModel = jScrollPane1.getVerticalScrollBar().getModel();
                int extend = brModel.getExtent();  // pixels
                int nrRows = (int)Math.ceil(extend / (1.0 * jTable1.getRowHeight())); // including the partial row at the bottom
                if (nrRows != previousNrRows) {
                    int cacheSize = (int)(nrRows * 1.4);
                    System.out.println("new cache size " + cacheSize  + "  (rows: " + nrRows + ")");
                    proxyModel.setCacheSize(cacheSize); // cache 40% more rows than visible
                    previousNrRows = nrRows;
                }
            }
        });
         */
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.SOUTH);

        pack();
    }
    // </editor-fold>//GEN-END:initComponents
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TableModelProxyTestWorkbench().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
    
    
    private class SlowTableModel extends AbstractTableModel {
        
        public int getRowCount() {
            return 1000;
        }
        
        public int getColumnCount() {
            return 4;
        }
        
        public Object getValueAt(int row, int column) {
            try {
                Thread.sleep(17);
            } catch (InterruptedException ie) {
                ie.printStackTrace();
            }
            return(new Long(row+column));
        }
    }
}
