/*
 * SDFilePanel.java
 *
 * Created on March 17, 2003, 3:13 PM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.util.gui;

import java.sql.*;
import java.util.*;

import javax.swing.JOptionPane;

import com.pharmadm.util.event.*;

/**
 *
 * @author  kdg
 */
public class RDBMSConnectPanel extends javax.swing.JPanel {
    
    private static final String STATE_CHANGED = "RDBMSConnect.ConnectionStateChanged";
    private Connection connection;
    private PDMEventManager eventManager = new PDMEventManager();
    
    /** Creates new form SDFilePanel */
    public RDBMSConnectPanel() {
        initComponents();
        fillDriverList();
    }
    
    /** Creates new form SDFilePanel */
    public RDBMSConnectPanel(String dbType, String host, Integer port, String database, String user, String pw) {
        initComponents();
        fillDriverList();
        if (Drivers.getInstance().getURLConstructors().containsKey(dbType)) {
            jComboBoxDatabaseType.setSelectedItem(dbType);
        }
        jTextFieldHost.setText(host);
        if (port != null) {
            jTextFieldPort.setText(port.toString());
        }
        jTextFieldDatabase.setText(database);
        jTextFieldUser.setText(user);
        jPasswordFieldDBPassword.setText(pw);
        jTextFieldUser.requestFocusInWindow();
    }
    
    public String getDBType() {
        return (String)jComboBoxDatabaseType.getSelectedItem();
    }
    
    public String getHost() {
        return jTextFieldHost.getText();
    }
    
    public Integer getPort() {
        Integer port = null;
        try {
            port = new Integer(Integer.parseInt(jTextFieldPort.getText()));
        } catch (NumberFormatException nfe) {
            // keep null
        }
        return port;
    }
    
    public String getDatabase() {
        return jTextFieldDatabase.getText();
    }
    
    public String getUserName() {
        return jTextFieldUser.getText();
    }
    
    public void addStateChangeListener(PDMEventListener listener) {
        eventManager.subscribe(listener, STATE_CHANGED);
    }
    
    private void publishStateChanged() {
        eventManager.publish(new PDMEvent(STATE_CHANGED, "The state of the connection has changed."));
    }
    
    private void fillDriverList() {
        Map urlConstructors = Drivers.getInstance().getURLConstructors();
        Iterator urlConstructorNames = urlConstructors.keySet().iterator();
        while (urlConstructorNames.hasNext()) {
            String uCName = (String)urlConstructorNames.next();
            jComboBoxDatabaseType.addItem(uCName);
        }
    }
    
    public boolean isConnectionEstablished() {
        try {
            return ((connection!=null) && (!connection.isClosed()));
        } catch (SQLException sqle) {
            return false;
        }
    }
    
    public Connection getConnection() {
        return connection;
    }
    
    public String getURL() {
        final URLConstructor urlConstructor = (URLConstructor)Drivers.getInstance().getURLConstructors().get(jComboBoxDatabaseType.getSelectedItem());
        String host = jTextFieldHost.getText();
        Integer port = null;
        try {
            port = new Integer(Integer.parseInt(jTextFieldPort.getText()));
        } catch (NumberFormatException nfe) {
            // keep null
        }
        
        String database = jTextFieldDatabase.getText();
        if (host != null && port != null && database != null) {
            return urlConstructor.constructURL(host, port, database);
        } else {
            return null;
        }
    }
    
    public String getPassword() {
        return jPasswordFieldDBPassword.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup = new javax.swing.ButtonGroup();
        jLabel12 = new javax.swing.JLabel();
        jPanelDataSource = new javax.swing.JPanel();
        jLabelDatabaseType = new javax.swing.JLabel();
        jComboBoxDatabaseType = new javax.swing.JComboBox();
        jTextFieldHost = new javax.swing.JTextField();
        jLabelHost = new javax.swing.JLabel();
        jLabelPort = new javax.swing.JLabel();
        jTextFieldPort = new javax.swing.JTextField();
        jToggleButtonAdvanced = new javax.swing.JToggleButton();
        jLabelDatabase = new javax.swing.JLabel();
        jTextFieldDatabase = new javax.swing.JTextField();
        jPanelUserCredentials = new javax.swing.JPanel();
        jLabelUser = new javax.swing.JLabel();
        jTextFieldUser = new javax.swing.JTextField();
        jLabelPassword = new javax.swing.JLabel();
        jPasswordFieldDBPassword = new javax.swing.JPasswordField();
        jButtonConnect = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jLabel12.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabel12.setText("Specify the database access information.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jLabel12, gridBagConstraints);

        jPanelDataSource.setLayout(new java.awt.GridBagLayout());

        jPanelDataSource.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "Data Source"));
        jLabelDatabaseType.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelDatabaseType.setText("Database vendor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jLabelDatabaseType, gridBagConstraints);

        jComboBoxDatabaseType.setToolTipText("Select the type of database");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jComboBoxDatabaseType, gridBagConstraints);

        jTextFieldHost.setColumns(20);
        jTextFieldHost.setToolTipText("Enter the server's host name or IP number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jTextFieldHost, gridBagConstraints);

        jLabelHost.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelHost.setText("Host name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jLabelHost, gridBagConstraints);

        jLabelPort.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelPort.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jLabelPort, gridBagConstraints);

        jTextFieldPort.setColumns(20);
        jTextFieldPort.setToolTipText("Enter the port number on the server");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jTextFieldPort, gridBagConstraints);

        jToggleButtonAdvanced.setMnemonic('A');
        jToggleButtonAdvanced.setText("Advanced");
        jToggleButtonAdvanced.setToolTipText("Allows to enter the JDBC URL");
        jToggleButtonAdvanced.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHEAST;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanelDataSource.add(jToggleButtonAdvanced, gridBagConstraints);

        jLabelDatabase.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelDatabase.setText("Database");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jLabelDatabase, gridBagConstraints);

        jTextFieldDatabase.setColumns(20);
        jTextFieldDatabase.setToolTipText("Enter the name of the databse on the server");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelDataSource.add(jTextFieldDatabase, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jPanelDataSource, gridBagConstraints);

        jPanelUserCredentials.setLayout(new java.awt.GridBagLayout());

        jPanelUserCredentials.setBorder(new javax.swing.border.TitledBorder(new javax.swing.border.EtchedBorder(), "User credentials"));
        jLabelUser.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelUser.setText("User");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelUserCredentials.add(jLabelUser, gridBagConstraints);

        jTextFieldUser.setColumns(20);
        jTextFieldUser.setToolTipText("Enter the database user name");
        jTextFieldUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelUserCredentials.add(jTextFieldUser, gridBagConstraints);

        jLabelPassword.setFont(new java.awt.Font("Dialog", 0, 12));
        jLabelPassword.setText("Password");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        jPanelUserCredentials.add(jLabelPassword, gridBagConstraints);

        jPasswordFieldDBPassword.setColumns(20);
        jPasswordFieldDBPassword.setToolTipText("Enter the database user's password");
        jPasswordFieldDBPassword.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        jPanelUserCredentials.add(jPasswordFieldDBPassword, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        add(jPanelUserCredentials, gridBagConstraints);

        jButtonConnect.setMnemonic('c');
        jButtonConnect.setText("Connect");
        jButtonConnect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonConnectActionPerformed(evt);
            }
        });

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        add(jButtonConnect, gridBagConstraints);

    }//GEN-END:initComponents
    
    private void inputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputActionPerformed
        String user = jTextFieldUser.getText();
        if (user != null && !"".equals(user)) {
            jButtonConnect.doClick();
        }
    }//GEN-LAST:event_inputActionPerformed
    
    private void jButtonConnectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonConnectActionPerformed
        boolean previousConnectionClosed = false;
        if (connection != null) {
            try {
                connection.close();
                previousConnectionClosed = true;
            } catch (SQLException sqle) {
                // don't need it anymore, anyway
            }
            connection = null;
        }
        tryConnect();
        if (previousConnectionClosed || isConnectionEstablished()) {
            publishStateChanged();
        }
    }//GEN-LAST:event_jButtonConnectActionPerformed
    
    private void tryConnect() {
        final URLConstructor urlConstructor = (URLConstructor)Drivers.getInstance().getURLConstructors().get(jComboBoxDatabaseType.getSelectedItem());
        if (urlConstructor == null) {
            JOptionPane.showMessageDialog(this, "No valid database type selected or unknown type.", "No database type", JOptionPane.ERROR_MESSAGE);
            return;
        }
        final String host = jTextFieldHost.getText();
        if (host == null) {
            JOptionPane.showMessageDialog(this, "No hostname or IP address specified.", "No host specified", JOptionPane.ERROR_MESSAGE);
            return;
        }
        Integer port = null;
        try {
            port = new Integer(Integer.parseInt(jTextFieldPort.getText()));
        } catch (NumberFormatException nfe) {
            // keep null
        }
        final String database = jTextFieldDatabase.getText();
        if (database == null) {
            JOptionPane.showMessageDialog(this, "No database name specified.\nCan only connect to a specific database.", "No database name specified", JOptionPane.ERROR_MESSAGE);
            return;
        }
        final String url = urlConstructor.constructURL(host, port, database);
        final String user = getUserName();
        final String pw = jPasswordFieldDBPassword.getText();
        final Properties info = new Properties();
        if (user != null) {
            info.put("user", user);
        }
        if (pw != null) {
            info.put("password", pw);
        }
        // For Oracle to report remarks for tables and columns.
        //info.put("remarksReporting", "true");
        try {
            connection = DriverManager.getConnection(url, info);
        } catch (SQLException sqle) {
            JOptionPane.showMessageDialog(this, "Could not connect to the database due to this reason:\n"+sqle.getMessage(), "Failed to connect (error "+sqle.getErrorCode()+")", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (connection == null) {
            JOptionPane.showMessageDialog(this, "Could not connect to the database.", "Failed to connect", JOptionPane.ERROR_MESSAGE);
            return;
        }
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JButton jButtonConnect;
    private javax.swing.JComboBox jComboBoxDatabaseType;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabelDatabase;
    private javax.swing.JLabel jLabelDatabaseType;
    private javax.swing.JLabel jLabelHost;
    private javax.swing.JLabel jLabelPassword;
    private javax.swing.JLabel jLabelPort;
    private javax.swing.JLabel jLabelUser;
    private javax.swing.JPanel jPanelDataSource;
    private javax.swing.JPanel jPanelUserCredentials;
    private javax.swing.JPasswordField jPasswordFieldDBPassword;
    private javax.swing.JTextField jTextFieldDatabase;
    private javax.swing.JTextField jTextFieldHost;
    private javax.swing.JTextField jTextFieldPort;
    private javax.swing.JTextField jTextFieldUser;
    private javax.swing.JToggleButton jToggleButtonAdvanced;
    // End of variables declaration//GEN-END:variables
    
    private static class Drivers {
        
        private static Drivers instance;
        
        private Map urlConstructors = new LinkedHashMap();
        
        private Drivers() {
            tryLoadDriver("Oracle thin driver", "oracle.jdbc.driver.OracleDriver", new URLConstructor() {
                public String constructURL(String host, Integer port, String database) {
                    return "jdbc:oracle:thin:@" + host + ((port!= null) ? ':'+port.toString() : "") + ':' + database;
                }
            });
            //tryLoadDriver("PostgreSQL 7.2.x", "org.postgresql.Driver", new URLConstructor() {
            //    public String constructURL(String host, Integer port, String database) {
            //        return "jdbc:postgresql://" + host + ((port!= null) ? ':'+port.toString() : "") + '/' + database;
            //    }
            //});
            
            if (urlConstructors.size() == 0) {
                System.out.println("         Please add a driver to your classpath or load another JDBC driver");
                System.out.println("         when starting this program, using the option");
                System.out.println("         -Djdbc.drivers=your_jdbc_driver_class for the java command.");
                System.out.println("         Your classpath must contain the driver in order for java to find it.");
            }
        }
        
        public static Drivers getInstance() {
            if (instance == null) {
                instance = new Drivers();
            }
            return instance;
        }
        
        /**
         * Gets a mapping from a name to the corresponding URL constructor.
         */
        public Map getURLConstructors() {
            return Collections.unmodifiableMap(urlConstructors);
        }
        
        private boolean tryLoadDriver(String description, String className, URLConstructor urlConstructor) {
            boolean success = false;
            try {
                System.out.print("Trying to load " + description + " driver...  ");
                Class.forName(className);
                System.out.println("ok.");
                urlConstructors.put(description, urlConstructor);
                success = true;
            } catch (ClassNotFoundException cnfe) {
                System.out.println(description + " driver not was found.");
            }
            return success;
        }
    }
    
    private interface URLConstructor {
        public String constructURL(String host, Integer port, String database);
    }
}
