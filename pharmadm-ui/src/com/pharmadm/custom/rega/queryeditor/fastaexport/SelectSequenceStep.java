/*
 * SelectSequenceStep.java
 *
 * Created on November 18, 2003, 10:22 AM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.custom.rega.queryeditor.fastaexport;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;

import com.pharmadm.util.gui.wizard.*;

/**
 *
 * @author  kdg
 */
public class SelectSequenceStep extends JPanel implements Step {
    
    private TableModel model;
    private Wizard wizard;
    private FastaExporter fastaExporter;
    
    /** Creates new form SelectSequenceStep */
    protected SelectSequenceStep(FastaExporter fastaExporter, TableModel model) {
        this.fastaExporter = fastaExporter;
        this.model = model;
        initComponents();
        fillColumnList();
        columnJList.addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent evt) {
                fillExampleDataList();
                if (wizard != null) {
                    wizard.notifyAllowsNextOrFinishChanged();
                }
            }
        });
        columnJList.setSelectedIndex(0);
    }
    
    private void fillColumnList() {
        DefaultListModel listModel = new DefaultListModel();
        for (int col = 0; col < model.getColumnCount(); col++) {
            if (fastaExporter.isSequenceColumn(model, col)) {
                listModel.addElement(new ColumnInfo(col, model.getColumnName(col)));
            }
        }
        columnJList.setModel(listModel);
    }
    
    private int getSelectedIndex() {
        return ((ColumnInfo)columnJList.getSelectedValue()).getColumnId();
    }
    
    /**
     * @pre a single column must be selected in the columnJList
     */
    private void fillExampleDataList() {
        int selectedColumn = getSelectedIndex();
        DefaultListModel exampleDataModel = new DefaultListModel();
        int row = 0;
        for (;(row < 8) && (row < model.getRowCount()); row++) {
            exampleDataModel.addElement(model.getValueAt(row, selectedColumn));
        }
        // always show 8 values
        for (; row < 8; row++) {
            exampleDataModel.addElement(" ");
        }
        exampleDataJList.setModel(exampleDataModel);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jScrollPane1 = new javax.swing.JScrollPane();
        columnJList = new javax.swing.JList();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        exampleDataJList = new javax.swing.JList();

        setLayout(new java.awt.BorderLayout());

        jScrollPane1.setToolTipText("Select a column");
        columnJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(columnJList);

        add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jPanel1.setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(5, 0, 0, 0)));
        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel2.setBorder(new javax.swing.border.TitledBorder("Sample data"));
        exampleDataJList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { " ", " ", " ", " ", " ", " ", " ", " " };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jPanel2.add(exampleDataJList, java.awt.BorderLayout.CENTER);

        jPanel1.add(jPanel2, java.awt.BorderLayout.NORTH);

        add(jPanel1, java.awt.BorderLayout.SOUTH);

    }//GEN-END:initComponents
    
    public boolean allowsBack() {
        return true;
    }
    
    public boolean allowsNextOrFinish() {
        return (columnJList.getSelectedIndex() != -1);
    }
    
    public JPanel getContentPanel() {
        return this;
    }
    
    public String getMainInstructions() {
        return "Select the sequence column for export from the list.";
    }
    
    public String getStepDescription() {
        return "Select sequence column";
    }
    
    public String getSubtitle() {
        return "Sequence";
    }
    
    public void onBack() {
    }
    
    public void onNextOrFinish() {
        fastaExporter.setSequenceColumn(getSelectedIndex());
    }
    
    public void setWizard(Wizard wizard) {
        this.wizard = wizard;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList columnJList;
    private javax.swing.JList exampleDataJList;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
    
}
