/*
 * ConfigureFormatStep.java
 *
 * Created on November 18, 2003, 2:47 PM
 */

/*
 * (C) Copyright 2000-2007 PharmaDM n.v. All rights reserved.
 * 
 * This file is licensed under the terms of the GNU General Public License (GPL) version 2.
 * See http://www.gnu.org/licenses/old-licenses/gpl-2.0.txt
 */
package com.pharmadm.custom.rega.queryeditor.fastaexport;

import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JPanel;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

import com.pharmadm.util.gui.wizard.*;

/**
 *
 * @author  kdg
 */
public class ConfigureFormatStep extends javax.swing.JPanel implements Step {
    
    private Wizard wizard;
    private FastaExporter fastaExporter;
    private PreviewJPanel previewPanel;
    
    /** Creates new form ConfigureFormatStep */
    protected ConfigureFormatStep(FastaExporter fastaExporter) {
        this.fastaExporter = fastaExporter;
        initComponents();
        initMoreComponents();
    }
    
    private Character getSeparatorChar() {
        if (spaceSeparatorJRadioButton.isSelected()) {
            return new Character(' ');
        } else if (semicolonSeparatorJRadioButton.isSelected()) {
            return new Character(';');
        } else if (commaSeparatorRadioButton.isSelected()) {
            return new Character(',');
        } else {
            return null;
        }
    }
    
    private void updateFastaExporter() {
        fastaExporter.setLimitDescriptionLength(limitDescriptionLengthJCheckBox.isSelected());
        fastaExporter.setDescriptionLength(((Integer)descriptionLengthJSpinner.getValue()).intValue());
        fastaExporter.setSeparatorChar(getSeparatorChar());
        fastaExporter.setLineWrapEnabled(wrapCheckBox.isSelected());
        fastaExporter.setStripAlignmentEnabled(stripAlignmentJCheckBox.isSelected());
    }
    
    private void initMoreComponents() {
        final PreviewJPanel previewPanel = new PreviewJPanel(fastaExporter);
        this.previewPanel = previewPanel;
        GridBagConstraints gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 0, 0);
        add(previewPanel, gridBagConstraints);
        
        ActionListener sampleUpdatingListener = new ActionListener() {
            public void actionPerformed(ActionEvent ae) {
                updateFastaExporter();
                previewPanel.recalc();
            }
        };
        limitDescriptionLengthJCheckBox.addActionListener(sampleUpdatingListener);
        spaceSeparatorJRadioButton.addActionListener(sampleUpdatingListener);
        semicolonSeparatorJRadioButton.addActionListener(sampleUpdatingListener);
        commaSeparatorRadioButton.addActionListener(sampleUpdatingListener);
        noSeparatorJRadioButton.addActionListener(sampleUpdatingListener);
        wrapCheckBox.addActionListener(sampleUpdatingListener);
        stripAlignmentJCheckBox.addActionListener(sampleUpdatingListener);

        SpinnerModel spinnerModel = new SpinnerNumberModel(80, 1, 1000, 1);
        descriptionLengthJSpinner.setModel(spinnerModel);
        
        spinnerModel.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent e) {
                updateFastaExporter();
                previewPanel.recalc();
            }
        });
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        java.awt.GridBagConstraints gridBagConstraints;

        separatorButtonGroup = new javax.swing.ButtonGroup();
        separatorSelectionJPanel = new javax.swing.JPanel();
        spaceSeparatorJRadioButton = new javax.swing.JRadioButton();
        semicolonSeparatorJRadioButton = new javax.swing.JRadioButton();
        commaSeparatorRadioButton = new javax.swing.JRadioButton();
        noSeparatorJRadioButton = new javax.swing.JRadioButton();
        wrapCheckBox = new javax.swing.JCheckBox();
        stripAlignmentJCheckBox = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        limitDescriptionLengthJCheckBox = new javax.swing.JCheckBox();
        descriptionLengthJSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        separatorSelectionJPanel.setLayout(new javax.swing.BoxLayout(separatorSelectionJPanel, javax.swing.BoxLayout.Y_AXIS));

        separatorSelectionJPanel.setBorder(new javax.swing.border.TitledBorder("Description fields separator"));
        spaceSeparatorJRadioButton.setSelected(true);
        spaceSeparatorJRadioButton.setText("space [   ]");
        separatorButtonGroup.add(spaceSeparatorJRadioButton);
        separatorSelectionJPanel.add(spaceSeparatorJRadioButton);

        semicolonSeparatorJRadioButton.setText("semicolon [ ; ]");
        separatorButtonGroup.add(semicolonSeparatorJRadioButton);
        separatorSelectionJPanel.add(semicolonSeparatorJRadioButton);

        commaSeparatorRadioButton.setText("comma [ , ]");
        separatorButtonGroup.add(commaSeparatorRadioButton);
        separatorSelectionJPanel.add(commaSeparatorRadioButton);

        noSeparatorJRadioButton.setText("none");
        separatorButtonGroup.add(noSeparatorJRadioButton);
        separatorSelectionJPanel.add(noSeparatorJRadioButton);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(separatorSelectionJPanel, gridBagConstraints);

        wrapCheckBox.setMnemonic('b');
        wrapCheckBox.setSelected(true);
        wrapCheckBox.setText("Begin a new line after 80 AAs or NTs.");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        add(wrapCheckBox, gridBagConstraints);

        stripAlignmentJCheckBox.setMnemonic('s');
        stripAlignmentJCheckBox.setSelected(true);
        stripAlignmentJCheckBox.setText("Strip alignment characters");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(stripAlignmentJCheckBox, gridBagConstraints);

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.X_AXIS));

        limitDescriptionLengthJCheckBox.setMnemonic('l');
        limitDescriptionLengthJCheckBox.setSelected(true);
        limitDescriptionLengthJCheckBox.setText("Limit description line to ");
        jPanel1.add(limitDescriptionLengthJCheckBox);

        jPanel1.add(descriptionLengthJSpinner);

        jLabel1.setText(" characters");
        jPanel1.add(jLabel1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 5, 0);
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jPanel1, gridBagConstraints);

    }//GEN-END:initComponents
    
    public boolean allowsBack() {
        return true;
    }
    
    public boolean allowsNextOrFinish() {
        return true;
    }
    
    public JPanel getContentPanel() {
        updateFastaExporter();
        previewPanel.recalc();
        return this;
    }
    
    public String getMainInstructions() {
        return "How should I format the fasta file?";
    }
    
    public String getStepDescription() {
        return "Specify format";
    }
    
    public String getSubtitle() {
        return "Format";
    }
    
    public void onBack() {
    }
    
    public void onNextOrFinish() {
        fastaExporter.writeFastaToFile();
    }
    
    public void setWizard(Wizard wizard) {
        this.wizard = wizard;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton commaSeparatorRadioButton;
    private javax.swing.JSpinner descriptionLengthJSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JCheckBox limitDescriptionLengthJCheckBox;
    private javax.swing.JRadioButton noSeparatorJRadioButton;
    private javax.swing.JRadioButton semicolonSeparatorJRadioButton;
    private javax.swing.ButtonGroup separatorButtonGroup;
    private javax.swing.JPanel separatorSelectionJPanel;
    private javax.swing.JRadioButton spaceSeparatorJRadioButton;
    private javax.swing.JCheckBox stripAlignmentJCheckBox;
    private javax.swing.JCheckBox wrapCheckBox;
    // End of variables declaration//GEN-END:variables
    
}
